;;; -*- :mode: lisp; package: ("XML-PARSER")
;;;
;;; this version (C) mecom gmbh 24.11.97
;;; available only from the cl-http repository and NOT to be REdistributed
;;; in ANY form. see cl-xml.html.
;;;
;;; see "xml-parser.lisp" for application
#|
<DOCUMENTATION>
<DESCRIPTION>
the "document" container for xml data streams
</DESCRIPTION>
<CHRONOLOGY>
<DATE>19971210</DATE>
 <DELTA>documents now accept comments.
  </DELTA>
</CHRONOLOGY>
</DOCUMENTATION>
|#

(in-package :xml-parser)

(defMethod node-class
           ((node (eql 'xml-document)) (op t) (context t))
  *xml-document-class*)

(defClass xml-document (xml-comment-node)
  ((xml-pi :initarg :xml-pi :initform nil
           :accessor xml-document.xml-pi)
   (doctype :initarg :doctype :initform nil
            :accessor xml-document.doctype)
   (dtd :initarg :dtd :initform nil
           :accessor xml-document.dtd :reader document.dtd)
   (content :initarg :element :initform nil
            :accessor xml-document.element)
   (validate :initarg :validate?
             :initform *xml-validate?*
             :accessor xml-document.validate?)
   (standalone :initarg :standalone?
               :initform t
               :accessor xml-document.standalone?
               :type (member :yes :no nil))
   (url :initarg :url :initform nil
        :accessor xml-document.url))
  (:documentation
   "an <CODE>XML-DOCUMENT</CODE> instance binds the pi declaration from a
    document, the dtd, and the content. an url is included if the doctype
    specified one. the <CODE>STANDALONE</CODE> attribute form the pi is cached as
    <CODE>XML-DOCUMENT.VALIDATE?</CODE>."))

(defMethod xml-document.validate?
           ((document t))
  nil)

(defMethod initialize-instance :after
           ((self xml-document) &key)
  (setf (xml-document.url self)
        (url-namestring (xml-document.url self) self)))


(defMethod print-object
           ((datum xml-document) (stream t))
  (cond (*xml-print-readably*
         (format stream "~a~%" (xml-document.xml-pi datum))
         (format stream "~@[~a~%~]" (xml-document.doctype datum))
         (when *xml-verbose*
           (format stream "<!-- generated by cl-xml (v.%a) -->~%"
                   *xml-processor-version*))
         (princ (xml-document.element datum) stream))
        (t
         (print-unreadable-object (datum stream :identity *xml-verbose* :type t)
           (princ (xml-document.xml-pi datum))))))
    
:EOF

  
